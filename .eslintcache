[{"D:\\Kundan\\Test\\QR-code-scanner-react\\react_qrcode_generation_scanner\\src\\index.js":"1","D:\\Kundan\\Test\\QR-code-scanner-react\\react_qrcode_generation_scanner\\src\\App.js":"2","D:\\Kundan\\Test\\QR-code-scanner-react\\react_qrcode_generation_scanner\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1642154583152,"results":"4","hashOfConfig":"5"},{"size":7505,"mtime":1642238171334,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1642154583152,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ep9ges",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Kundan\\Test\\QR-code-scanner-react\\react_qrcode_generation_scanner\\src\\index.js",[],["17","18"],"D:\\Kundan\\Test\\QR-code-scanner-react\\react_qrcode_generation_scanner\\src\\App.js",["19","20"],"import React, { useState, useRef } from 'react';\r\nimport { Container, Card, CardContent, makeStyles, Grid, TextField, Button } from '@material-ui/core';\r\nimport QRCode from 'qrcode';\r\nimport QrReader from 'react-qr-reader';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nfunction App() {\r\n  const [trainersName, setTrainersName] = useState('');\r\n  const [progamName, setProgamName] = useState('');\r\n  const [lat, setLat] = useState('');\r\n  const [long, setLong] = useState('');\r\n  const [expiryDate, setExpiryDate] = useState('');\r\n  const [expiryTime, setExpiryTime] = useState('');\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [scanResultFile, setScanResultFile] = useState('');\r\n  const [scanResultWebCam, setScanResultWebCam] = useState('');\r\n  const [openCamFlag, setOpenCamFlag] = useState(false);\r\n  const [personName, setPersonName] = React.useState([]);\r\n  const classes = useStyles();\r\n  const qrRef = useRef(null);\r\n  //const theme = useTheme();\r\n\r\n  const names = [\r\n    'Kartik',\r\n    'Ranjeet',\r\n    'Sandeep',\r\n    'Akshay',\r\n    'Chaitanya',\r\n    'Saurabh',\r\n    'Vijay',\r\n    'Anupam',\r\n    'Srishti',\r\n  ];\r\n\r\n  const handleChange = (event) => {\r\n    const { target: { value } } = event;\r\n    setPersonName(\r\n      typeof value === 'string' ? value.split(',') : value,\r\n    );\r\n  };\r\n\r\n  const generateQrCode = async () => {\r\n    let qrCodeObj = { trainersName, progamName, expiryDate, expiryTime, lat, long, personName }\r\n    try {\r\n      const response = await QRCode.toDataURL(JSON.stringify(qrCodeObj));\r\n      setImageUrl(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const handleErrorFile = (error) => {\r\n    console.log(error);\r\n  }\r\n  const handleScanFile = (result) => {\r\n    if (result) {\r\n      setOpenCamFlag(false);\r\n      setScanResultWebCam(JSON.parse(result));\r\n    }\r\n  }\r\n  const onScanFile = () => {\r\n    qrRef.current.openImageDialog();\r\n  }\r\n  const handleErrorWebCam = (error) => {\r\n    console.log(error);\r\n  }\r\n  const handleScanWebCam = (result) => {\r\n    if (result) {\r\n      setOpenCamFlag(false);\r\n      setScanResultWebCam(JSON.parse(result));\r\n    }\r\n  }\r\n  return (\r\n    <Container className={classes.conatiner}>\r\n      <Card>\r\n        <h2 className={classes.title}>Generate Download & Scan QR Code with React js</h2>\r\n        <CardContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <Grid item lg={12} md={12}>\r\n                <TextField fullWidth label=\"Trainer's Name\" onChange={(e) => setTrainersName(e.target.value)} />\r\n                <TextField fullWidth label=\"Programe Name\" onChange={(e) => setProgamName(e.target.value)} />\r\n                <TextField fullWidth label=\"Latitude\" onChange={(e) => setLat(e.target.value)} />\r\n                <TextField fullWidth label=\"Longitude\" onChange={(e) => setLong(e.target.value)} />\r\n                <TextField fullWidth label=\"ExpiryDate\" onChange={(e) => setExpiryDate(e.target.value)} />\r\n                <TextField fullWidth label=\"ExpiryTime\" onChange={(e) => setExpiryTime(e.target.value)} />\r\n                <div>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"demo-mutiple-name-label\">Select Candidates</InputLabel>\r\n                    <Select\r\n                      multiple\r\n                      value={personName}\r\n                      onChange={handleChange}\r\n                      input={<Input />}\r\n                    // MenuProps={MenuProps}\r\n                    >\r\n                      {names.map((name) => (\r\n                        <MenuItem key={name} value={name}>\r\n                          {name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </div>\r\n              </Grid>\r\n\r\n              <Button className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => generateQrCode()}>\r\n                Generate QR code\r\n              </Button>\r\n              <br />\r\n              <div className={classes.qrcodeBox}>\r\n                {imageUrl ? (<a href={imageUrl} download> <img src={imageUrl} alt=\"img\" /> </a>) : null}\r\n              </div>\r\n            </Grid>\r\n\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\r\n              <QrReader\r\n                ref={qrRef}\r\n                delay={300}\r\n                style={{ width: '100%' }}\r\n                onError={handleErrorFile}\r\n                onScan={handleScanFile}\r\n                legacyMode\r\n              />\r\n              {/* <h3>Scanned Code: {scanResultFile}</h3> */}\r\n            </Grid>\r\n\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              {/* <h3>Qr Code Scan by Web Cam</h3> */}\r\n              <div>\r\n                <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={() => setOpenCamFlag(true)}>\r\n                  Open Camera to scan QR code\r\n                </Button>\r\n              </div>\r\n              {\r\n                openCamFlag ? (\r\n                  <QrReader\r\n                    delay={300}\r\n                    style={{ width: '100%' }}\r\n                    onError={handleErrorWebCam}\r\n                    onScan={handleScanWebCam}\r\n                  />\r\n                ) : (\r\n                  <div>\r\n                    {scanResultWebCam ? (\r\n                      <div className={classes.scannedDetail}>\r\n                        <div><b>Trainer's Name: </b>{scanResultWebCam.trainersName}</div>\r\n                        <div><b>Program Name: </b>{scanResultWebCam.progamName}</div>\r\n                        <div><b>Expiry Date: </b>{scanResultWebCam.expiryDate}</div>\r\n                        <div><b>Expiry Time: </b>{scanResultWebCam.expiryTime}</div>\r\n                        <div><b>Latitude: </b>{scanResultWebCam.lat}</div>\r\n                        <div><b>Longitude: </b>{scanResultWebCam.long}</div>\r\n                        <div>\r\n                          <b>You attendance is marked if your name is </b>\r\n                          <i>{scanResultWebCam ? scanResultWebCam.personName.toString() : ''}</i>\r\n                        </div>\r\n                      </div>\r\n                    ) : (null)}\r\n\r\n                  </div>\r\n                )\r\n              }\r\n\r\n              {/* <h3>Scanned By WebCam Code: {scanResultWebCam}</h3> */}\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  conatiner: {\r\n    marginTop: 10\r\n  },\r\n  formGrid: {\r\n\r\n  },\r\n  title: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    background: '#3f51b5',\r\n    color: '#fff',\r\n    padding: 20\r\n  },\r\n  btn: {\r\n    marginTop: 10,\r\n    marginBottom: 20\r\n  },\r\n  formControl: {\r\n    width: '100%',\r\n  },\r\n  qrcodeBox: {\r\n    textAlign: 'center'\r\n  },\r\n  scannedDetail: {\r\n    background: '#90ff90',\r\n    border: '3px solid #06ac06',\r\n    padding: '1rem',\r\n    borderRadius: '4px',\r\n  }\r\n}));\r\nexport default App;\r\n","D:\\Kundan\\Test\\QR-code-scanner-react\\react_qrcode_generation_scanner\\src\\reportWebVitals.js",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":19,"column":10,"nodeType":"29","messageId":"30","endLine":19,"endColumn":24},{"ruleId":"27","severity":1,"message":"31","line":19,"column":26,"nodeType":"29","messageId":"30","endLine":19,"endColumn":43},{"ruleId":"23","replacedBy":"32"},{"ruleId":"25","replacedBy":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'scanResultFile' is assigned a value but never used.","Identifier","unusedVar","'setScanResultFile' is assigned a value but never used.",["34"],["35"],"no-global-assign","no-unsafe-negation"]